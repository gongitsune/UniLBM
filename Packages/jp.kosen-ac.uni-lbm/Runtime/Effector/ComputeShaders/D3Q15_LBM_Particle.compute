#pragma kernel init
#pragma kernel draw

#define FLUID_TYPE 0
#define BOUNDARY_TYPE 1

#define THREAD_X 2
#define THREAD_Y 2
#define THREAD_Z 2

#include "Packages/jp.kosen-ac.uni-lbm/Runtime/Effector/Shaders/particle_data.hlsl"
#include "Packages/jp.kosen-ac.uni-lbm/ShaderLibraly/lbm_utility.hlsl"

float delta_time;
uint3 dimensions;
int num_particles;
StructuredBuffer<uint> field;
StructuredBuffer<float3> velocity;
RWStructuredBuffer<particle_data> particles;

float3 periodic_boundary(in float3 pos)
{
    return (pos + dimensions) % dimensions;
}

uint get_index(in uint3 pos)
{
    return pos.x + pos.y * dimensions.x + pos.z * dimensions.x * dimensions.y;
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void init(in uint3 id: SV_DispatchThreadID)
{
    if (any(id >= dimensions)) return;

    uint idx = get_index(id);

    particles[idx].prev_pos = particles[idx].pos = (float3)id / dimensions;
    particles[idx].col = float4(0.3f, 0.3f, 0.5f, 1.0f);
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void draw(in uint3 id: SV_DispatchThreadID)
{
    if (any(id >= dimensions)) return;

    uint idx = get_index(id);
    if (field[idx] != FLUID_TYPE)
    {
        particles[idx].pos = (float3)id / dimensions;
        particles[idx].prev_pos = particles[idx].pos + float3(0, 0.005, 0);
        particles[idx].col = float4(1.f, 1.f, 1.f, 1.0f);
        return;
    }

    float3 p_pos = particles[idx].pos;
    float3 prev = p_pos;

    uint3 cell_pos = uint3(p_pos * dimensions);
    uint cell_idx = get_index(cell_pos);

    p_pos += velocity[cell_idx] * delta_time * 100;
    p_pos = frac(p_pos);

    cell_pos = uint3(p_pos * dimensions);
    cell_idx = get_index(cell_pos);

    if (any(isnan(p_pos)) || any(abs(p_pos - 0.5f) > 0.5f) || field[cell_idx] != FLUID_TYPE)
    {
        // p_pos = random3(idx / num_particles) * 0.9f + 0.05f;
        p_pos = id / (float)dimensions;
        prev = frac(p_pos);
    }

    particles[idx].prev_pos = prev;
    particles[idx].pos = p_pos;

    float vel_length = length(velocity[cell_idx]) * 100;
    float4 col = float4(hsv_2_rgb(float3(clamp(vel_length, 0, 1), 1, 1)), 1.f);

    // update
    particles[idx].col = field[cell_idx] == FLUID_TYPE ? col : float4(0.f, 0.f, 0.f, 1.0f);
}
