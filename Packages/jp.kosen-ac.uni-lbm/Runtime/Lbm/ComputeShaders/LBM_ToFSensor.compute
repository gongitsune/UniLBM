#define NUM_THREADS 8

//==============================================================================
// 構造体等定義
//==============================================================================
struct tof_data
{
    float distance;
    float2 position;
    float3 direction;
};

//==============================================================================
// Uniform 変数
//==============================================================================
// ToFセンサの情報を格納したバッファ
StructuredBuffer<tof_data> tof_buffer;
// ToFデータ書き込み用テクスチャ
RWTexture2D<float> tof_texture;
// ToFデータ読み込み用テクスチャ
Texture2D<float> tof_texture_read;
// ToFデータ書き込み時の円の半径 (0.0 ~ 1.0)
float tof_radius;
// ToFデータ書き込み平面の最小座標と最大座標
float4 tof_plane;

//==============================================================================
// ToFデータ書き込み用カーネル
//==============================================================================
[numthreads(NUM_THREADS, 1, 1)]
void write_tof_data(uint id: SV_DispatchThreadID)
{
    uint sensor_cnt, _;
    uint tof_width, tof_height;
    tof_buffer.GetDimensions(sensor_cnt, _);
    tof_texture.GetDimensions(tof_width, tof_height);
    if (id >= sensor_cnt)
        return;

    tof_data sensor = tof_buffer[id];

    // センサの位置をUV座標に変換
    float2 plane_min = tof_plane.xy;
    float2 plane_max = tof_plane.zw;
    float2 uv = (sensor.position - plane_min) / (plane_max - plane_min);

    int radius_w = round(tof_radius * tof_width);
    int radius_h = round(tof_radius * tof_height);
    for (int y = -radius_h; y <= radius_h; y++)
    {
        for (int x = -radius_w; x <= radius_w; x++)
        {
            float2 offset = float2(x, y) / float2(tof_width, tof_height);
            float2 uv_offset = uv + offset;
            if (any(uv_offset < 0) || any(uv_offset > 1))
                continue;

            float distance = sensor.distance;
            float2 position = sensor.position;
            float3 direction = sensor.direction;

            // テクスチャに書き込み
            tof_texture[uint2(uv_offset)] = distance;
        }
    }
}